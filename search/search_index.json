{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"arch/","title":"The BACK Stack Architecture","text":"<p>In the cloud-native world, the hub-and-spoke architecture presents an intriguing prospect. This design pattern capitalizes on Kubernetes's inherent elasticity and scalability, thereby enabling a host of unique benefits for development, deployment, and data management.</p>"},{"location":"arch/#hub-and-spoke","title":"Hub-and-Spoke","text":"<p>Imagine a central data platform residing in the Kubernetes cluster, acting as the \"hub.\" This hub is the single source of truth, providing foundational data and services to surrounding applications, the \"spokes.\" For example, these spokes are microservices deployed within a Kubernetes cluster, focusing on some specific functionalities.</p>"},{"location":"arch/#benefits","title":"Benefits","text":"<ul> <li>Loose Coupling and Agility: Spokes are developed and deployed autonomously, enabling rapid iteration and independent scaling. This fosters modularity and faster time-to-market for new features.</li> <li>Data Consistency and Governance: The centralized hub ensures data integrity and consistency across all spokes. Access control and security policies can be applied centrally, simplifying management.</li> <li>Scalability and Elasticity: Both the hub and spokes leverage Kubernetes' inherent scaling capabilities. Resources can be dynamically adjusted based on demand, optimizing resource utilization and cost.</li> <li>Cloud-Native Advantages: Seamless integration with cloud provider services expands development possibilities.</li> </ul>"},{"location":"arch/#how-does-it-all-fit-together","title":"How does it all fit together?","text":""},{"location":"development/","title":"Development","text":""},{"location":"development/#local-development","title":"Local Development","text":"<p>If you are interested in working on The BACK stack and its components there are a few different components which are utilized within the repository.</p> <pre><code>\u251c\u2500\u2500 .devcontainer\n\u251c\u2500\u2500 argocd\n\u251c\u2500\u2500 backstage\n\u251c\u2500\u2500 bundle\n\u251c\u2500\u2500 crossplane\n\u2514\u2500\u2500 kyverno\n</code></pre> <p>In the following sections we will breakdown each components use and workflows.</p>"},{"location":"development/#dev-container","title":"Dev Container","text":"<p>The showcase repository includes a devcontainer configuration to provide all of the necessary tooling for development of the BACK stack. The only prerequisites on your local machine are:</p> <ul> <li>a container runtime that supports Docker (e.g. Docker Desktop)</li> <li>a runtime for devcontainer (e.g. VSCode, DevPod, or GitHub Codespaces)</li> </ul>"},{"location":"development/#argocd","title":"ArgoCD","text":"<p>In the <code>argocd</code> folder you will find all the files necessary for deploying Kyverno and the default sets of policies it uses to secure your clusters and installation.</p>"},{"location":"development/#backstage","title":"Backstage","text":""},{"location":"development/#crossplane","title":"Crossplane","text":""},{"location":"development/#kyverno","title":"Kyverno","text":""},{"location":"development/#porterbundle","title":"Porter/Bundle","text":"<p>If you are interested in working on The BACK stack and its components</p>"},{"location":"install/","title":"Install the BACK Stack","text":"<p>In order to try out the BACK Stack locally you can follow these steps</p> <p>You will use Porter to perform the installation. Currently, the generated Bundle supports installing the BACK stack on EKS or locally using KinD</p>"},{"location":"install/#porter-bundle-info-settings","title":"Porter Bundle Info &amp; Settings","text":"<p>Credentials:</p> <p>NOTE: Although cloud provider credentials are not required, without them you cannot provision new clusters.</p> <p>How to generate Azure AKS <code>kubeconfig</code> file:</p> <pre><code>az aks get-credentials --name MyManagedCluster \\ \n  --resource-group MyResourceGroup \\ \n  --file kubeconfig-azure\n</code></pre> <p>How to generate AWS EKS <code>kubeconfig</code> file:</p> <pre><code>aws eks update-kubeconfig --name backstack-hub \\ \n  --region us-west-1 \\ \n  --kubeconfig kubeconfig-aws\n</code></pre> <p>How to generate Azure Credentials:</p> <pre><code>az ad sp create-for-rbac --sdk-auth --role Owner \\ \n  --scopes /subscriptions/$YOURSUBSCRIPTIONID &gt; azure.json\n</code></pre> <p>How to pass AWS Credentials: NOTE Ensure you have stored your Key ID and Access Key in a file under the <code>default</code> heading (e.g.)</p> <pre><code>cat ~/.aws/credentials\n[default]\naws_access_key_id = YOURKEYHERE\naws_secret_access_key = YOURSECRETKEYHERE\n</code></pre> Name Description Required Comments aws-credentials Credentials to be used for Crossplane <code>provider-aws</code> false azure-credentials Credentials to be used for Crossplane <code>provider-azure</code> false github-token Github API token true kubeconfig kubeconfig to connect to non-local cluster false This should point to a kubeconfig for the cluster you want to install to. Ensure there is a valid long term authentication token stored in the file vault-token This should always be <code>root</code> true <p>Parameters:</p> Name Description Type Default Required Comments argocd-host DNS name for ArgoCD string <code>argocd-7f000001.nip.io</code> false backstage-host DNS name for Backstage string <code>backstage-7f000001.nip.io</code> false cluster-type Target kubernetes cluster type. Accepted values are <code>kind</code>, <code>eks</code> string <code>kind</code> true repository Gitops repository for cluster requests and catalog-info string <code>https://github.com/$YOURUSERNAME/showcase</code> true vault-host DNS name for Vault string <code>vault-7f000001.nip.io</code> false <p>This bundle uses the following tools: docker, exec, helm3, Kubernetes.</p>"},{"location":"install/#generic-installation-instructions","title":"Generic Installation Instructions","text":"<p>To install this bundle, run the following commands, passing <code>--param KEY=VALUE</code> for any parameters you want to customize:</p> <pre><code>porter credentials generate back-stack-cloud-creds \\ \n  --reference ghcr.io/back-stack/showcase-bundle:latest\n</code></pre> <pre><code>porter install --reference ghcr.io/back-stack/showcase-bundle:latest \\ \n  --credential-set back-stack-cloud-creds \\ \n  --param repository=https://github.com/USER/REPO\n</code></pre>"},{"location":"install/#installing-locally-into-kind","title":"Installing Locally into KinD","text":"<p>The Porter bundle already includes KinD, so the only prerequisite is Docker/Docker Desktop to be running.</p> <ol> <li>Install porter</li> <li> <p>Generate the credentials config, leaving the <code>kubeconfig</code> empty (it will be ignored)</p> <pre><code>porter credentials generate back-stack-cloud-creds \\ \n  --reference ghcr.io/back-stack/showcase-bundle:latest\n</code></pre> </li> <li> <p>Install the bundle; the default <code>cluster-type</code> and <code>*-host</code> parameters are configured for local deployment, and you need to allow Porter to access your local docker daemon.</p> <pre><code>porter install back-stack \\\n  --reference ghcr.io/back-stack/showcase-bundle:latest \\\n  --credential-set back-stack-cloud-creds \\\n  --param repository=https://github.com/USER/REPO \\\n  --allow-docker-host-access\n</code></pre> </li> </ol> <p>To connect to the KinD cluster running the BACK stack, update your kubeconfig:</p> <pre><code>porter installations output show kubeconfig-external \\ \n  -i back-stack &gt; ~/.kube/config\n</code></pre>"},{"location":"install/#installing-into-eks","title":"Installing into EKS","text":"<ul> <li>Existing EKS cluster with AWS Load Balancer Controller add-on installed</li> <li> <p>local <code>kubeconfig</code> file to connect to the cluster</p> </li> <li> <p>Install porter (see above)</p> </li> <li> <p>Generate the credentials config, specifying the path to the <code>kubeconfig-aws</code> file</p> <pre><code>porter credentials generate back-stack-cloud-creds \\ \n  --reference ghcr.io/back-stack/showcase-bundle:latest\n</code></pre> </li> <li> <p>Install the bundle; set <code>cluster-type</code> to <code>eks</code> and specify DNS names that you want to use to access the BACK stack services. This can either be done using <code>--param</code> flags or by generating a parameter set</p> <pre><code># using parameter set\nporter parameters generate back-stack-params \\ \n  --reference ghcr.io/back-stack/showcase-bundle:latest\n\nporter install back-stack \\ \n  --reference ghcr.io/back-stack/showcase-bundle:latest \\\n  --credential-set back-stack-cloud-creds \\\n  --parameter-set back-stack-params\n</code></pre> </li> <li> <p>After installation, you need to ensure the DNS names specified for <code>argocd-host</code>, <code>backstage-host</code>, and <code>vault-host</code> all resolve to the ingress service created during installation. The endpoint for this can be found by checking the bundle outputs</p> <pre><code>porter installations output show ingress -i back-stack\n</code></pre> <p>For this showcase, you can update <code>/etc/hosts</code>.</p> </li> </ul>"},{"location":"intro/","title":"Streamlining Platform Engineering","text":"<p>In today's fast-paced software landscape, enterprises rely on shared platforms to cater to diverse development needs. Platform engineering sits at the heart of this dynamic, ensuring a reliable and adaptable foundation for multiple teams and applications. Platform engineers wear many hats, from designing and implementing the platform to continuously evolving it with changing requirements. But the rewards are substantial: streamlined development, empowered developers through self-service, a collaborative environment, optimized resource utilization, and enhanced security \u2013 all leading to a more efficient and flexible software development lifecycle.</p>"},{"location":"intro/#harmonizing-development-practices","title":"Harmonizing Development Practices","text":"<p>The BACK Stack orchestrates a robust suite of open-source tools, each tackling a critical pain point:</p> <ul> <li>Backstage: This user-friendly developer portal centralizes access to essential tools and services, streamlining workflows and boosting collaboration.</li> <li>Argo CD: Embracing the GitOps philosophy, it automates continuous delivery, ensuring seamless deployments and perfect synchronization between applications and their codebase.</li> <li>Crossplane: Forget juggling disparate cloud providers. Crossplane is the universal control plane, automating infrastructure provisioning with unmatched efficiency and flexibility.</li> <li>Kyverno: Security is woven into the fabric of development. Kyverno enforces policies, calculates compliance scores, and automates governance, safeguarding your applications from the ground up.</li> </ul>"},{"location":"intro/#the-back-stack-advantage","title":"The BACK Stack Advantage","text":"<ul> <li>Unified and Extensible: Tailor the platform to your needs, seamlessly integrating with existing tools and workflows.</li> <li>Cloud-Agnostic: Break free from vendor lock-in. Deploy and manage applications across any cloud environment with ease.</li> <li>Streamlined Development: Automate routine tasks, reduce friction, and empower developers to focus on innovation.</li> <li>Enhanced Collaboration: Foster a collaborative environment where teams can work efficiently and effectively.</li> <li>Reduced Complexity: Eliminate the headaches of managing multiple disparate platforms.</li> </ul>"},{"location":"intro/#beyond-technology","title":"Beyond Technology","text":"<p>The BACK Stack tackles the intricate challenges of platform engineering head-on. Uniting these four projects delivers a unified, extensible, and cloud-agnostic platform that simplifies the entire software lifecycle. From development to deployment and maintenance, the BACK Stack provides a structured framework and the flexibility to tailor it to your needs. This holistic approach empowers collaboration, optimizes resources, and reduces the burden of managing disparate platforms.</p>"},{"location":"intro/#kubecon-na-2023-project-announcement-showcase","title":"KubeCon NA 2023 Project Announcement &amp; Showcase","text":"<p>Check out the KubeCon NA 2023 Demo</p> <p></p>"},{"location":"blog/","title":"What is new in the BACK Stack world?","text":""},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/","title":"Getting Started with BACK Stack: Revolutionizing Platform Engineering","text":"<p>In the ever-evolving world of software development, agility, efficiency, and collaboration are paramount. The BACK Stack is a robust reference architecture transforming the internal developer platform landscape. This solution unites Backstage, Argo CD, Crossplane, and Kyverno, offering a holistic solution for platform engineering built using proven CNCF open-source projects. But what makes the BACK Stack so essential, and how can organizations leverage its capabilities?</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#the-rise-of-platform-engineering","title":"The Rise of Platform Engineering","text":"<p>The concept of platform engineering has gained traction as enterprises increasingly recognize the need for a shared, robust foundation for software development. Platform engineers play a crucial role, juggling design, implementation, and evolution of platforms to meet diverse requirements. The BACK Stack fits perfectly into this scenario, providing a unified and adaptable framework.</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#the-components-of-back-stack","title":"The Components of BACK Stack","text":"<ul> <li>Backstage: An extensible portal that centralizes access to essential tools, enhancing workflows and collaboration.</li> <li>Argo CD: Implements GitOps, automating continuous delivery and ensuring codebase synchronization.</li> <li>Crossplane: A universal control plane that streamlines infrastructure provisioning across multiple cloud providers.</li> <li>Kyverno: Integrates security into development by enforcing policies and automating governance.</li> </ul>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#the-need-for-a-reference-architecture","title":"The Need for a Reference Architecture","text":"<p>In a world where technology and requirements change rapidly, a reference architecture like BACK Stack is invaluable. It provides a standardized, scalable approach to platform engineering, reducing complexity and eliminating the need for disparate, siloed tools. By harmonizing development practices, BACK Stack empowers organizations to optimize resources, enhance security, and streamline the development lifecycle.</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#getting-started-with-back-stack","title":"Getting Started with BACK Stack","text":""},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#step-1-understanding-your-requirements","title":"Step 1: Understanding Your Requirements","text":"<p>Before diving into BACK Stack, assess your organization's specific needs. Understanding the problems you aim to solve helps to tailor the BACK Stack effectively. Consider what level of platform engineering maturity your organization has achieved. The BACK Stack is ideal for those at level 2 or above.</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#step-2-familiarizing-with-the-components","title":"Step 2: Familiarizing with the Components","text":"<p>Get to know each component of the BACK Stack. Explore the functionalities of Backstage, Argo CD, Crossplane, and Kyverno. This knowledge will be crucial in integrating these tools into your workflow.</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#step-3-setting-up-the-environment","title":"Step 3: Setting Up the Environment","text":"<p>Prepare your environment by following the instructions here. Ensure you can access the necessary cloud environments and permissions to install and configure these tools.</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#step-4-installation-and-configuration","title":"Step 4: Installation and Configuration","text":"<p>Follow the quickstart documentation available for detailed installation and configuration guidelines. Start by setting up Backstage and integrating Argo CD, Crossplane, and Kyverno.</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#step-5-experimentation-and-customization","title":"Step 5: Experimentation and Customization","text":"<p>Experiment with different configurations and integrations once the stack is up and running. You can use various cloud providers, deploy add-ons to your spoke clusters, and configure security policies. Customize the tools to align with your development workflows and requirements.</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#step-6-training-and-adoption","title":"Step 6: Training and Adoption","text":"<p>Encourage your development teams to familiarize themselves with the BACK Stack. Start with built-in workflows such as clusters-as-a-service or namespace-as-a-service. Offer training sessions and resources to ensure a smooth transition and adoption.</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#step-7-continuous-evolution","title":"Step 7: Continuous Evolution","text":"<p>Stay updated with the latest advancements in each component of the BACK Stack. BACK Stack project will continuously evolve to leverage new features and improvements.</p>"},{"location":"blog/2024/01/25/getting-started-with-back-stack-revolutionizing-platform-engineering/#conclusion","title":"Conclusion","text":"<p>The BACK Stack represents a significant leap forward in platform engineering, offering a unified, cloud-agnostic solution that simplifies and streamlines the software development lifecycle. By embracing this reference architecture, organizations can foster a more collaborative, efficient, and secure development environment. Begin your journey with BACK Stack today and revolutionize how you build and manage internal developer platforms.</p> <p>Reach out on the #backstack channel on the CNCF Slack with any feedback or questions!</p>"},{"location":"blog/archive/2024/","title":"2024","text":""}]}